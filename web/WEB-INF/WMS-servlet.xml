<?xml version="1.0" encoding="UTF-8"?>

<!--
    Document   : WMS-servlet.xml
    Created on : 06 June 2007, 17:59
    Author     : Jon
    Description:
        Configures the properties of the WMS servlet (see web.xml)
-->

<beans xmlns='http://www.springframework.org/schema/beans'
       xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
       xsi:schemaLocation='http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd'>
    
    <!-- Defines a configuration object that is used to configure this server.
         This object is created via GRexConfig.readConfig(), a static factory method -->
    <bean id="grexConfig" class="uk.ac.rdg.resc.grex.config.GRexConfig"
          factory-method="readConfig">
        <!-- G-Rex will look for the config file in the CLASSPATH unless you
             uncomment the line below and set the full path to the config file -->
        <!--<constructor-arg><value>/path/to/GRexConfig.xml</value></constructor-arg>-->
    </bean>
    
    <!-- Need beans for the config object, tile cache, ?logging framework? -->
    
    <!-- This is a MultiActionController that will handle all the GET methods
         (i.e. all requests for information that do not change the state of 
         the server) -->
    <bean id="getOperationsController" class="uk.ac.rdg.resc.grex.controllers.GetOperationsController">
        <property name="supportedMethods" value="GET"/>
        <!-- Inject the configuration object into this controller -->
        <property name="grexConfig"><ref local="grexConfig"/></property>
        <!-- Inject the store of instances into this controller -->
        <property name="instancesStore"><ref local="instancesStore"/></property>
        <property name="methodNameResolver"><ref local="propsResolverGet"/></property>
    </bean>
    <!-- This maps URL patterns to the methods of the multi-action controller -->
    <bean id="propsResolverGet" class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
        <property name="mappings">
            <value>
                /welcome.html=showWelcomePage
                /services.*=listServices
                /*/instances.*=listInstancesForService
                /*/config.*=showConfigForService
                /*/instances/*.*=showServiceInstance
                /*/instances/*/outputs/**=downloadOutputFile
            </value>
        </property>
    </bean>
    
    <!-- Each Controller will return the name of a View that maps to a certain JSP.
         For example, if a Controller returns a View name "hello_xml", the 
         ViewResolver will display /WEB-INF/jsp/hello_xml.jsp. -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- We put the JSPs in /WEB-INF so that they are not directly visible 
             over the network -->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    
    <!-- Exception Handling: this ensures that all GRexExceptions are returned to 
         the user as an XML document, created by displayGRexException.jsp.
         Note that we don't have to register this anywhere as an exception handler
         because Spring automagically detects it. -->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="uk.ac.rdg.resc.grex.exceptions.GRexException">displayGRexException</prop>
            </props>
        </property>
        <!-- If an unexpected error occurs (i.e. one that doesn't get expressed as
             a GRexException) we will handle it using displayDefaultException.jsp -->
        <property name="defaultErrorView" value="displayDefaultException"/>
    </bean>
    
</beans>
